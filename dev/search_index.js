var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [PROPACK]","category":"page"},{"location":"reference/#PROPACK.lansvd!-Tuple{Char, Char, Integer, Integer, Integer, Any, Matrix{ComplexF32}, Vector{Float32}, Vector{Float32}, Matrix{ComplexF32}, Float32, Vector{Float32}, Vector{Int64}, Vector{Float32}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd!","text":"lansvd!: Compute leading singular triplets.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd!-Tuple{Char, Char, Integer, Integer, Integer, Any, Matrix{ComplexF64}, Vector{Float64}, Vector{Float64}, Matrix{ComplexF64}, Float64, Vector{Float64}, Vector{Int64}, Vector{Float64}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd!","text":"lansvd!: Compute leading singular triplets.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd!-Tuple{Char, Char, Integer, Integer, Integer, Any, Matrix{Float32}, Vector{Float32}, Vector{Float32}, Matrix{Float32}, Float32, Vector{Float32}, Vector{Int64}, Vector{Float32}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd!","text":"lansvd!: Compute leading singular triplets.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd!-Tuple{Char, Char, Integer, Integer, Integer, Any, Matrix{Float64}, Vector{Float64}, Vector{Float64}, Matrix{Float64}, Float64, Vector{Float64}, Vector{Int64}, Vector{Float64}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd!","text":"lansvd!: Compute leading singular triplets.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd-Tuple{Char, Char, Integer, Integer, Ptr{Nothing}, Vector{ComplexF32}, Integer, Integer, Float32, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd","text":"lansvd: Compute leading singular triplets: simplified interface.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\nk: number of triplets desired\nkmax: maximum number of iterations (= max dimension of Krylov space)\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd-Tuple{Char, Char, Integer, Integer, Ptr{Nothing}, Vector{ComplexF64}, Integer, Integer, Float64, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd","text":"lansvd: Compute leading singular triplets: simplified interface.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\nk: number of triplets desired\nkmax: maximum number of iterations (= max dimension of Krylov space)\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd-Tuple{Char, Char, Integer, Integer, Ptr{Nothing}, Vector{Float32}, Integer, Integer, Float32, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd","text":"lansvd: Compute leading singular triplets: simplified interface.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\nk: number of triplets desired\nkmax: maximum number of iterations (= max dimension of Krylov space)\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd-Tuple{Char, Char, Integer, Integer, Ptr{Nothing}, Vector{Float64}, Integer, Integer, Float64, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd","text":"lansvd: Compute leading singular triplets: simplified interface.\n\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\nk: number of triplets desired\nkmax: maximum number of iterations (= max dimension of Krylov space)\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl!-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Any, Matrix{ComplexF32}, Vector{Float32}, Vector{Float32}, Matrix{ComplexF32}, Float32, Vector{Float32}, Vector{Int64}, Vector{Float32}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd_irl!","text":"lansvd_irl!: Compute leading singular triplets.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nmaxiter: maximum number of restarts\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax-p,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax-p,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖, gap], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\ngap: smallest relative gap between the shifts and the lower bound on Ritz values\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl!-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Any, Matrix{ComplexF64}, Vector{Float64}, Vector{Float64}, Matrix{ComplexF64}, Float64, Vector{Float64}, Vector{Int64}, Vector{Float64}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd_irl!","text":"lansvd_irl!: Compute leading singular triplets.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nmaxiter: maximum number of restarts\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax-p,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax-p,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖, gap], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\ngap: smallest relative gap between the shifts and the lower bound on Ritz values\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl!-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Any, Matrix{Float32}, Vector{Float32}, Vector{Float32}, Matrix{Float32}, Float32, Vector{Float32}, Vector{Int64}, Vector{Float32}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd_irl!","text":"lansvd_irl!: Compute leading singular triplets.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nmaxiter: maximum number of restarts\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax-p,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax-p,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖, gap], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\ngap: smallest relative gap between the shifts and the lower bound on Ritz values\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl!-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Any, Matrix{Float64}, Vector{Float64}, Vector{Float64}, Matrix{Float64}, Float64, Vector{Float64}, Vector{Int64}, Vector{Float64}, Vector{Int64}, Ptr{Nothing}, Vector{Int64}}","page":"Reference","title":"PROPACK.lansvd_irl!","text":"lansvd_irl!: Compute leading singular triplets.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nmaxiter: maximum number of restarts\naprod: function defining the linear operator A\nU: m x k array to store left singular vectors (k ≤ min(kmax-p,m,n))\ns: length k array to store desired singular values (k ≤ min(kmax-p,m,n))\nbnd: length k array to store error estimates on the singular values\nV: n x k array to store right singular vectors\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i])\nwork: work array of size\nm + n + 9kmax + 2kmax^2 + 4 + max(m+n, 4*kmax+4) if jobu = jobv = 'N'\nm + n + 9kmax + 5kmax^2 + 4 + max(3kmax^2 + 4kmax+4, nb*max(m,n)) otherwise where nb is a BLAS-3 block size\niwork: integer work array of size\n2*kmax + 1 if jobu = jobv = 'N'\n8*kmax     otherwise\ncwork: complex work array\ndoption: [δ, η, ‖A‖, gap], where\nδ: the level of orthogonality desired,\nη: vectors with components larger than η will be purged during reorthogonalization\n‖A‖: estimate of the norm of A\ngap: smallest relative gap between the shifts and the lower bound on Ritz values\nioption: [cgs, elr], where\ncgs: 1 = classical Gram-Schmidt, 0 = modified Gram-Schmidt\nelr: 1 = extended local orthogonality\ndparm: array for passing data to aprod; WARNING: we use dparm as passthrough pointer!!!\niparm: array for passing integer data to aprod.\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Integer, Ptr{Nothing}, Vector{ComplexF32}, Float32, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd_irl","text":"lansvd_irl: Compute leading singular triplets, simplified interface.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nk: number of triplets desired\nmaxiter: maximum number of restarts\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i]).\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Integer, Ptr{Nothing}, Vector{ComplexF64}, Float64, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd_irl","text":"lansvd_irl: Compute leading singular triplets, simplified interface.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nk: number of triplets desired\nmaxiter: maximum number of restarts\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i]).\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Integer, Ptr{Nothing}, Vector{Float32}, Float32, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd_irl","text":"lansvd_irl: Compute leading singular triplets, simplified interface.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nk: number of triplets desired\nmaxiter: maximum number of restarts\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i]).\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.lansvd_irl-Tuple{Char, Char, Char, Integer, Integer, Integer, Integer, Integer, Integer, Ptr{Nothing}, Vector{Float64}, Float64, Ptr{Nothing}}","page":"Reference","title":"PROPACK.lansvd_irl","text":"lansvd_irl: Compute leading singular triplets, simplified interface.\n\nwhich: compute triplets for largest ('L') or smallest ('S') singular values\njobu: compute left singular vectors ('Y'/'N')\njobv: compute right singular vectors ('Y'/'N')\nm: number of rows of A\nn: number of cols of A\nkmax: maximum number of iterations (= max dimension of Krylov space)\np: number of shifts per restart\nk: number of triplets desired\nmaxiter: maximum number of restarts\npff: pointer to function defining the linear operator A\ninitvec: starting vector for bidiagonalization\ntolin: desired accuracy; the error on s[i] is approximately   max(16ϵ s[1], tolin * s[i]).\n\nReturns: (U, s, V, bnd).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.tsvd-Union{Tuple{LinearOperators.AbstractLinearOperator{T}}, Tuple{T}} where T","page":"Reference","title":"PROPACK.tsvd","text":"tsvd(A::AbstractLinearOperator; kwargs...)\n\nCompute a few leading singular triplets of A using only products with A and A'.\n\nKeyword arguments\n\ninitvec::Vector: initial vector for the iterations (default: zeros)\nk::Integer: number of leading singular values to approximate (default: 1)\nkmax::Integer: maximum dimensionality of search space (default: min(size(A))+10)\ntolin::Real: desired accuracy; the error on s[i] is approximately max(16ϵ s[1], tolin * s[i]) (default: √ϵ).\n\nReturn values\n\nU::Matrix: orthogonal matrix of left singular vectors\ns::Vector: approximate leading singular values\nV::Matrix: orthogonal matrix of right singular vectors\nbnd::Vector: bound on the accuracy of each singular value\nnprod::Int: number of products with A required\nntprod::Int: number of products with A' required.\n\nThe arrays U, s and V are such that A - U * diagm(s) * V' should be of the order of the next largest singular value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.tsvd_irl-Union{Tuple{LinearOperators.AbstractLinearOperator{T}}, Tuple{T}} where T","page":"Reference","title":"PROPACK.tsvd_irl","text":"tsvd_irl(A::AbstractLinearOperator; kwargs...)\n\nCompute a few extreme singular triplets of A using only products with A and A' and the implicitly restarted Lanczos bidiagonalization method.\n\nKeyword arguments\n\nsmallest::Bool: whether the smallest or leading triplets should be approximated (default: True)\ninitvec::Vector: initial vector for the iterations (default: zeros)\nkmax::Integer: maximum dimensionality of search space (default: min(size(A))+10)\np::Integer: number of shifts per restart (default: 1)\nk::Integer: number of extreme singular values to approximate (default: 1)\nmaxiter::Integer: maximum number of restarts (default: min(size(A)))\ntolin::Real: desired accuracy; the error on s[i] is approximately max(16ϵ s[1], tolin * s[i]) (default: √ϵ).\n\nReturn values\n\nU::Matrix: orthogonal matrix of left singular vectors\ns::Vector: approximate leading singular values\nV::Matrix: orthogonal matrix of right singular vectors\nbnd::Vector: bound on the accuracy of each singular value\nnprod::Int: number of products with A required\nntprod::Int: number of products with A' required.\n\nIf smallest == False, the arrays U, s and V are such that A - U * diagm(s) * V' should be of the order of the next largest singular value.\n\nIf smallest == True, U * diagm(s) * V' is (an approximation of) the best rank-k approximation of A.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.tsvdvals-Union{Tuple{LinearOperators.AbstractLinearOperator{T}}, Tuple{T}} where T","page":"Reference","title":"PROPACK.tsvdvals","text":"tsvdvals(A::AbstractLinearOperator; kwargs...)\n\nCompute a few leading singular values of A using only products with A and A'.\n\nKeyword arguments\n\nSee the documentation of tsvd().\n\nReturn values\n\ns::Vector: approximate leading singular values\nbnd::Vector: bound on the accuracy of each singular value\nnprod::Int: number of products with A required\nntprod::Int: number of products with A' required.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PROPACK.tsvdvals_irl-Union{Tuple{LinearOperators.AbstractLinearOperator{T}}, Tuple{T}} where T","page":"Reference","title":"PROPACK.tsvdvals_irl","text":"tsvdvals_irl(A::AbstractLinearOperator; kwargs...)\n\nCompute a few extreme singular values of A using only products with A and A' and the implicitly restarted Lanczos bidiagonalization method.\n\nKeyword arguments\n\nSee the documentation of tsdv_irl().\n\nReturn values\n\ns::Vector: approximate leading singular values\nbnd::Vector: bound on the accuracy of each singular value\nnprod::Int: number of products with A required\nntprod::Int: number of products with A' required.\n\n\n\n\n\n","category":"method"},{"location":"#PROPACK.jl","page":"Home","title":"PROPACK.jl","text":"","category":"section"},{"location":"tutorial/#PROPACK.jl-Tutorial","page":"Tutorial","title":"PROPACK.jl Tutorial","text":"","category":"section"}]
}
